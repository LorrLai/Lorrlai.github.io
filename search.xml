<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Valine为你的Hexo个人博客添加评论功能</title>
      <link href="/2021/12/18/20211217-ping-lun-gong-neng-tian-jia/"/>
      <url>/2021/12/18/20211217-ping-lun-gong-neng-tian-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Valine为你的Hexo个人博客添加评论功能"><a href="#使用Valine为你的Hexo个人博客添加评论功能" class="headerlink" title="使用Valine为你的Hexo个人博客添加评论功能"></a>使用Valine为你的Hexo个人博客添加评论功能</h1><blockquote><p>一个好的博客怎么能没有评论功能呢，拖了几天终于能把评论模块安排上了o(<em>￣︶￣</em>)o</p><p>本文使用Valine在基于hexo搭建的个人博客上添加评论功能</p></blockquote><h2 id="一、博客评论模块选择"><a href="#一、博客评论模块选择" class="headerlink" title="一、博客评论模块选择"></a>一、博客评论模块选择</h2><p>关于评论模块有很多选择，因为博主也没有一一用过，只能通过网络搜索来寻找一个简单好用的，以下是一位博主对于一些评论模块的评价：</p><blockquote><ul><li><strong>多说</strong> - 最多用户使用的评论，但遗憾2017年6月将暂定服务；不建议新用户使用，但为旧用户保留，也感谢多说一路的陪伴；（国内最大的也无了QAQ）</li><li><strong>网易云跟帖</strong> - 网易提供的评论组件，功能比较简单，性能优秀；管理后台在查询上还不算特别智能，但足够普通用户使用；（这个也无了QAQ）</li><li><strong>畅言</strong> - 搜狐提供的评论组件，功能丰富，体验优异；但必须进行域名备案。只要域名备过案就可以通过审核。（备案劝退QAQ）</li><li><strong>Disqus</strong> - 国外使用较多的评论组件。万里长城永不倒，一枝红杏出墙来，你懂的。（博主的意思就是说被墙了QAQ）</li></ul><p>以上评论模块应该大家都知道，多说和网易云跟帖没有了，畅言要备案，对于对于挂靠在GitHub的博客非常的不友好，放弃！Disqus，不希望自己的博客，可以不分国界！也放弃！</p><p>作者：iHTCboy<br>链接：<a href="https://www.jianshu.com/p/57afa4844aaa">https://www.jianshu.com/p/57afa4844aaa</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>这篇文章中的博主最终选择了基于GitHub的<code>gitment</code>，类似的还有<code>gitalk</code>。但这两个模块使用了权限过高的oauth，那么过高的权限会发生什么，只要看完下面这句话就能想到了：</p><blockquote><p><code>GitHub OAuth application</code>允许程序来操作你的github账户，可以对github中的仓库进行<strong>读写</strong></p></blockquote><p>这就相当于你将你所有的公共仓库授权给了评论者，删库跑路不在话下。也就是说拿到你的授权 Token 的人，可以将你的 GitHub 公共仓库删空（这是github权限分的不够细的锅），如果恶意攻击者想获取使用者的AccessToken，只需要在代码中加上一个 ajax 请求即可。（根据v2ex网友的评论，如果网站自行修改了 gitalk.js 脚本或者反代了github api，就很容易拿到你的 Token ）</p><p>原贴地址：<a href="https://www.v2ex.com/t/535608">https://www.v2ex.com/t/535608</a></p><p>因此，在冲浪了一个早上并参观了无数前辈的博客后，以及各种踩坑安全问题之后，选择使用<code>Valine</code>模块为我的博客添加评论功能，这是一款基于LeanCloud开发的快速、简洁且高效的无后端评论系统，内置微博表情也可以自定义添加表情。当然，放弃了后端是有一些弊端的，不过估计也不会有几个评论，所以还是选择个稳当简单的。想要鱼和熊掌兼得就得看大佬自己发挥了_(:<em>」∠)</em> </p><p>Valine中文文档：<a href="https://valine.js.org/">https://valine.js.org</a></p><p>这是Valine评论模块的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211217150753371.png" alt="image-20211217150753371"></p><h2 id="二、获取APP-ID和APP-Key"><a href="#二、获取APP-ID和APP-Key" class="headerlink" title="二、获取APP ID和APP Key"></a>二、获取APP ID和APP Key</h2><h3 id="2-1-注册-登录LeanCloud"><a href="#2-1-注册-登录LeanCloud" class="headerlink" title="2.1 注册/登录LeanCloud"></a>2.1 注册/登录LeanCloud</h3><p>LeanCloud控制台：<a href="https://console.leancloud.cn/login?from=/apps">https://console.leancloud.cn/login?from=%2Fapps</a></p><p>点击注册按钮，填写基本信息并绑定手机即可注册。（均需要填写真实的信息，后续都需要验证）</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211218161846094.png" alt="image-20211218161846094"></p><p>然后进入到以下界面，需要进行实名认证，我肯定是选择个人认证了。需要填写真实姓名和身份证号，然后使用支付宝扫脸，真的是很认真地在认证了。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211218162228366.png" alt="image-20211218162228366"></p><p>不过在注册时填了邮箱和手机，只验证了手机还没有验证邮箱，在进入到控制台后，还需要进行邮箱验证才能正常使用功能。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211218162821103.png" alt="image-20211218162821103"></p><h3 id="2-2-创建应用"><a href="#2-2-创建应用" class="headerlink" title="2.2 创建应用"></a>2.2 创建应用</h3><p>进入<a href="https://console.leancloud.cn/apps">控制台</a>后点击按钮<code>创建应用</code>，选择<code>开发版</code>，点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211218163137383.png" alt="image-20211218163137383"></p><p>然后就获得了一个应用，点击进入该应用，选择左下角的<code>设置-&gt;应用凭证</code>，就能看到<code>APP ID</code>和<code>APP Key</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211218163445380.png" alt="image-20211218163445380"></p><h2 id="三、应用到博客"><a href="#三、应用到博客" class="headerlink" title="三、应用到博客"></a>三、应用到博客</h2><p>通过以下语句可以将评论模块引用到博客中，需要填写上一步获得的<code>APP ID</code>和<code>APP Key</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    ..    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>//unpkg.com/valine/dist/Valine.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vcomments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            el<span class="token operator">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>            appId<span class="token operator">:</span> <span class="token string">'Your appId'</span><span class="token punctuation">,</span>            appKey<span class="token operator">:</span> <span class="token string">'Your appKey'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为博主是用基于hexo的主题进行开发的，可以直接在主题的配置文件<code>_config.yml</code>中填写相关参数：（主题为闪烁之狐大佬开发的<code>Matery</code>）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否开启</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> <span class="token comment"># APP_ID</span>  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> <span class="token comment"># APP_KEY</span>  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 已弃用可以删掉了</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 已弃用可以删掉了</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 访客数量</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'mm'</span> <span class="token comment"># 头像展示方式 Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 一页显示的评论数</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'just go go'</span> <span class="token comment"># 评论框占位文本</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png <span class="token comment"># 评论框背景</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多配置项可以查看<a href="https://valine.js.org/configuration.html">https://valine.js.org/configuration.html</a></p><p>以上参数的效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211218174730304.png" alt="image-20211218174730304"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://fenghen0918.github.io/2020/06/19/hexo/matery-zhu-ti-valine-ping-lun-xi-tong/">https://fenghen0918.github.io/2020/06/19/hexo/matery-zhu-ti-valine-ping-lun-xi-tong/</a></p><p><a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></p><h2 id="文章更新记录"><a href="#文章更新记录" class="headerlink" title="文章更新记录"></a>文章更新记录</h2><p>2021.12.18 文章完成并发布</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Valine </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人博客搭建教程</title>
      <link href="/2021/12/09/20211209-wang-zhan-da-jian-ji-lu/"/>
      <url>/2021/12/09/20211209-wang-zhan-da-jian-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo个人博客搭建教程"><a href="#Hexo个人博客搭建教程" class="headerlink" title="Hexo个人博客搭建教程"></a>Hexo个人博客搭建教程</h1><blockquote><p>如果有兴趣搭建一个自己的个人博客的话，可以参考一下这篇文章哦，本文章适合跟我一样的菜鸟，提供保姆级的详细步骤。本人也还在学习过程中，文章中难免也有不周全的地方，欢迎大家一起讨论！</p><p>本文包括了使用Hexo搭建网站并发布的全过程：前期环境、Hexo安装、网页个性化（每个人的选择不同所以没有详细叙述主题的修改细节）、网站部署、内容的上传/更新。</p><p>转载请标明出处哦(<em>^▽^</em>)</p></blockquote><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h2><h3 id="1-1-选择框架Hexo"><a href="#1-1-选择框架Hexo" class="headerlink" title="1.1 选择框架Hexo"></a>1.1 选择框架Hexo</h3><p>Hexo算是比较成熟的博客框架了，最主要是使用简单快速，对于中文也很友好（台湾的开发者创建的），在完成了前期的搭建后，后期的文章可以直接通过<code>Markdown</code>语法来写，真的非常友好简单。同时Hexo也拥有数量众多的主题和插件，可以轻松的完成不错的前端效果。</p><blockquote><p>Markdown是一种纯文本格式的标记语言，通过简单的标记语法，就使普通文本内容具有一定的格式，可以让排版这项工作变得轻松。同时，很多论坛和社区都开始支持使用MarkDown，能够快速地上传文章和教程。推荐使用<em>Typora</em>进行Markdown的编写，采用所见即所得的编辑方式，支持中文。</p></blockquote><h3 id="1-2-查看Hexo文档"><a href="#1-2-查看Hexo文档" class="headerlink" title="1.2 查看Hexo文档"></a>1.2 查看Hexo文档</h3><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a>，能够根据文档的内容快速上手hexo，以下内容也参考文档进行操作。</p><p>可以在文档中看到非常重要的安装前提，也就是环境要求：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204172350265.png" alt="image-20211204172350265"></p><p>两个要求<strong>Node.js和Git</strong>，文档中也给出了简要的安装方法。</p><blockquote><p>ps.在cmd运行过程中，如果停住了可以enter回车让程序继续运行（原因是你在运行窗口中进行了点击操作，这个操作会暂停进程）</p></blockquote><h3 id="1-3-Node-js安装配置"><a href="#1-3-Node-js安装配置" class="headerlink" title="1.3 Node.js安装配置"></a>1.3 Node.js安装配置</h3><p>参考：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a>（菜鸟教程）</p><p>如果装了可以检查一下版本，cmd命令提示符面板中，输入以下命令查看：</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204172158111.png" alt="image-20211204172158111"></p><p>可以看到已经安装了node.js，且版本符合要求。</p><h3 id="1-4-Git安装配置"><a href="#1-4-Git安装配置" class="headerlink" title="1.4 Git安装配置"></a>1.4 Git安装配置</h3><p>参考：<a href="https://www.cnblogs.com/hdlan/p/14395189.html">https://www.cnblogs.com/hdlan/p/14395189.html</a>（个人博客，讲解非常细致，顺便一提这个主页一看就是hexo搭的）</p><p>如果已经安装可以通过以下命令检查版本：</p><pre class="line-numbers language-none"><code class="language-none">git --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204201718773.png" alt="image-20211204201718773"></p><p>可以看到已经安装了git。</p><h2 id="二、-Hexo建站"><a href="#二、-Hexo建站" class="headerlink" title="二、 Hexo建站"></a><strong>二、 Hexo建站</strong></h2><h3 id="2-1-安装Hexo"><a href="#2-1-安装Hexo" class="headerlink" title="2.1 安装Hexo"></a>2.1 安装Hexo</h3><p>选择hexo框架安装的位置（最好不要选择c盘）新建文件夹后在文件夹中打开命令行，使用以下命令安装它的依赖包：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204202800290.png" alt="image-20211204202800290"></p><p>安装完成。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204203448865.png" alt="image-20211204203448865"></p><p>如果缺少了以上任意的文件可能导致后续的命令无法找到：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204203954411.png" alt="image-20211204203954411"></p><blockquote><p><strong>解决方法：</strong></p></blockquote><p>①后续如果持续出现这个问题，可以选择命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接将hexo安装在c盘中的全局目录，后续就不会出现这个问题。这是最简单稳定的方法。</p><p>如果这个安装完成后，后续出现如下报错：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211207154346562.png" alt="image-20211207154346562"></p><p>则可以通过命令<code>npm install --force</code>或<code>rm -rf node_modules</code>解决</p><p>②但node_modules文件比较大不想装在c盘中，可以找到hexo的安装目录，将该路径加入系统变量的path中。</p><p>③将上图安装hexo后得到的这些文件拖动到需要使用hexo命令的文件下，显示出现同名文件时直接点击跳过即可。但是这个方法需要你在每一个使用hexo命令的文件夹下都要有这些文件，非常冗余，推荐使用第二种解决方法。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204210020301.png" alt="image-20211204210020301"></p><h3 id="2-2-新建网站文件"><a href="#2-2-新建网站文件" class="headerlink" title="2.2 新建网站文件"></a>2.2 新建网站文件</h3><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹<code>&lt;你想要安装hexo的文件名&gt;</code>中新建所需要的文件：</p><pre class="line-numbers language-none"><code class="language-none">hexo init &lt;你想要安装hexo的文件名&gt;  cd &lt;你上一步安装hexo的文件名&gt;  npm install <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果此时出现命令不存在的问题，可以回到2.1查看解决方法。</p><p>第一步命令：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204203935251.png" alt="image-20211204203935251"></p><p>第二、三步命令：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204204108070.png" alt="image-20211204204108070"></p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204203918374.png" alt="image-20211204203918374"></p><p>此时可以看到文件结构为：</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>_config.yml</code>文件尤为重要，其中是网站的<strong>配置信息</strong>，可以根据文档<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a> 修改对应的参数。</p><p>其次就是<code>themes</code>，hexo提供的主题可以帮助我们快速的搭建网站。</p><p><code>source</code>资源文件夹是存放用户资源的地方，也就是我们自己写的文章和草稿就放在这个里面。</p><h3 id="2-3-查看Hexo网页"><a href="#2-3-查看Hexo网页" class="headerlink" title="2.3 查看Hexo网页"></a>2.3 查看Hexo网页</h3><p>现在hexo已经为你提供了一个基础网页，可以进行查看，以方便后续的修改。</p><p>开启服务器的命令为：</p><pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204210524942.png" alt="image-20211204210524942"></p><p>此时复制网址直接在浏览器打开即可看到基础界面：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211204210607653.png" alt="image-20211204210607653"></p><blockquote><p>如果没有启动服务器就无法看到网页，后续修改了配置后如果刷新网页无法看到修改，就需要<strong>重新启动/清空缓存</strong>。命令<code>ctrl+c</code>关闭本地服务器，命令<code>hexo clean</code>清除缓存。</p></blockquote><h2 id="三、网页个性化"><a href="#三、网页个性化" class="headerlink" title="三、网页个性化"></a><strong>三、网页个性化</strong></h2><h3 id="3-1-选择主题"><a href="#3-1-选择主题" class="headerlink" title="3.1 选择主题"></a>3.1 选择主题</h3><p>为了更加方便快捷的完成网页的装修，不推荐直接自己从头开始搭建，hexo中有很多前辈已经为我们提供了大量精美的主题可供选择。当然，前端大佬可以自由发挥了。主题可以在<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>中进行挑选，附录中有一些我觉得还不错的主题。在选择主题时多关注<strong>布局和功能实现</strong>，毕竟配色和背景之类的东西都是很容易修改的。本站选择主题为<code>Matery</code>。</p><p>选择好了心仪的主题后，一般都能够在主页找到关于这个主题的介绍和使用说明，接下来就根据说明来使用该主题。根据主题文档中的说明，将该主题下载到<code>themes</code>文件夹下：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211206131656797.png" alt="image-20211206131656797"></p><p>切换主题就需要用到<code>_config.yml</code>文件（hexo根目录下的<code>_config.yml</code>）了，打开文件，找到<code>theme</code>值，修改为主题的文件名：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211206132230510.png" alt="image-20211206132230510"></p><p>此时再浏览主页的网址，就能看到主页更改为了所选择的主题：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211206133039232.png" alt="image-20211206133039232"></p><h3 id="3-2-修改主题细节"><a href="#3-2-修改主题细节" class="headerlink" title="3.2 修改主题细节"></a>3.2 修改主题细节</h3><p>每个主题具体的内容修改就参照<strong>主题说明文档</strong>进行修改即可。</p><p>修改各种配色时可以使用网站：<a href="http://tools.jb51.net/static/colorpicker/">http://tools.jb51.net/static/colorpicker/</a> 能够直接在网页中选取颜色，复制十六进制颜色代码到代码中，同时网站中还有一些配色参考。</p><p>推荐阅读文章（包含本站所使用的主题超详细修改指南）：<a href="https://sitoi.cn/posts/63466.html">https://sitoi.cn/posts/63466.html</a></p><h2 id="四、部署网站"><a href="#四、部署网站" class="headerlink" title="四、部署网站"></a>四、部署网站</h2><p>确保网站在本地搭建完成后就可以进行这一步。此时的网站只能够在本地使用，那么如何将网站上线到互联网上，让所有人都能进行访问就是这一部分解决的问题。方法一使用了<code>Github Page</code>平台进行托管，这样就免去了租借服务器和域名的费用，且搭建方法简单便捷。方法二需要租借服务器和域名，更能彰显大佬风采（bushi。</p><h3 id="4-1-方法一：Github-Page平台托管"><a href="#4-1-方法一：Github-Page平台托管" class="headerlink" title="4.1 方法一：Github Page平台托管"></a><strong>4.1 方法一：Github Page平台托管</strong></h3><p>登录/注册GitHub账号：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209085226010.png" alt="image-20211209085226010"></p><blockquote><p>推荐使用<code>Google Chrome浏览器</code>进行操作，可以将GitHub的页面翻译为中文，但还是推荐使用英文模式，毕竟机翻看起来不太舒服。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209092353351.png" alt="image-20211209092353351"></p><p>依次输入以下信息创建账号：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209092922967.png" alt="image-20211209092922967"></p><p>用户名不可以重复，后续需要进行邮箱的验证。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209093348967.png" alt="image-20211209093348967"></p><p>验证完成后就可以正常使用GitHub了。</p><p>成功登录后，就需要创建一个新的项目仓库<code>New repository</code>，来存储我们的网站。仓库名命名为：<code>xxxx.github.io</code>，这样后续访问博客的链接就会变成<a href="http://xxxx.github.io/">http://xxxx.github.io</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209094312180.png" alt="image-20211209094312180"></p><p>打开<code>Setting</code>中的<code>Pages</code>，可以看到相关设置：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209094947337.png" alt="image-20211209094947337"></p><p>GitHub中也有自带的主题，选择了主题后就可以看到默认的界面了：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209095102758.png" alt="image-20211209095102758"></p><p>接下来就可以设置本地git连接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"github用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"github注册邮箱"</span>ssh-keygen -t rsa -C <span class="token string">"github注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209100901632.png" alt="image-20211209100901632"></p><p>完成以上步骤后，就能够在<code>C:\Users\Administrator/.ssh</code>中看到<code>SSH</code>生成的密钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>。GitHub连接需要的是公钥，将其复制粘贴到GitHub账户设置的<code>SSH keys</code>中。</p><p>先点击头像的下拉菜单，在其中找到<code>Settings</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209101433585.png" alt="image-20211209101433585"></p><p>然后找到<code>SSH and GPG keys</code>，点击<code>New SSH key</code>新建一个SSH key：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209101523642.png" alt="image-20211209101523642"></p><p>随意输入一个<code>Title</code>，将<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>中的内容复制粘贴到<code>Key</code>中：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209101639093.png" alt="image-20211209101639093"></p><p>点击<code>Add SSH Key</code>，完成SSH key的添加：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209101650535.png" alt="image-20211209101650535"></p><p>接下来就可以通过以下命令查看ssh是否连接成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209102654182.png" alt="image-20211209102654182"></p><p>可以看到成功连接的信息。</p><p>接下来就需要将本地的网站部署到GitHub中了，需要修改hexo根目录下的<code>_config.yml</code>文件中的<code>deploy</code>字段为：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>xxxx/xxxx.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>此时需要安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后输入以下命令就可以完成部署：</p><blockquote><p>每次更新后都需要通过以下命令重新发布网站</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中<code>hexo g</code>为<code>hexo generate</code>的缩写，可以生成静态文章。<code>hexo d</code>为<code>hexo deploy</code>的缩写，可以部署文章。</p><p>执行完上述命令后，没有看到报错信息即为成功部署。此时能够在github的仓库中看到本地的文件已经成功上传，但是要注意上传后可能不在<code>main</code>分支中。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209114152589.png" alt="image-20211209114152589"></p><p>点击<code>main</code>旁边的下拉菜单，能够看到其他分支：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209114304825.png" alt="image-20211209114304825"></p><p>在<code>master</code>分支中能够看到网站文件已经全部上传到github的仓库中了，但是此时直接访问<a href="http://xxxx.github.io/">http://xxxx.github.io</a>还是只能看到默认页面，并不是我们自己上传的个人博客，这是因为GitHub Pages中显示的分支设置为了<code>main</code>，我们需要把分支切换为<code>master</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209114634326.png" alt="image-20211209114634326"></p><p>到此，通过GitHub Pages的部署完成，所有人都能通过<a href="http://xxxx.github.io/">http://xxxx.github.io</a>来访问你的个人博客了。</p><h3 id="4-2-方法二：购买域名和服务器"><a href="#4-2-方法二：购买域名和服务器" class="headerlink" title="4.2 方法二：购买域名和服务器"></a><strong>4.2 方法二：购买域名和服务器</strong></h3><p>因为博主自己还没有进行过这一步骤，所以也就没有经验分享了。今后有机会会进行这个方法的尝试，毕竟GitHub时不时被墙，在国内访问博客体验不佳，如果有一个国内的服务器体验会好很多。</p><p>如果对这个方法有兴趣可以参考这篇文章：<a href="https://redamancy.tech/archives/10/">https://redamancy.tech/archives/10/</a></p><h2 id="五、内容的上传-更新"><a href="#五、内容的上传-更新" class="headerlink" title="五、内容的上传/更新"></a>五、内容的上传/更新</h2><h3 id="5-1-搭建GitHub图床"><a href="#5-1-搭建GitHub图床" class="headerlink" title="5.1 搭建GitHub图床"></a>5.1 搭建GitHub图床</h3><p>Markdown的最大问题在于图片的存储，如果不使用图床，每一次的文章发布都需要上传一次图片，费时费力，图床能够很好的解决这个问题。图床可以理解为一个图片的服务器，文章可以直接通过URL来获取图片。现有的图床工具很多，本文使用<code>PicGo</code>来搭建。</p><p>PicGo下载网址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>我的电脑是windows64位，下载的是以下版本：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209135130365.png" alt="image-20211209135130365"></p><p>通过安装包安装完成后，可以看到以下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209135949454.png" alt="image-20211209135949454"></p><p>在github中再新建一个仓库，用做图床：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209141241618.png" alt="image-20211209141241618"></p><p>然后点击头像旁的下拉菜单依次找到<code>settings-&gt;Developer settings-&gt;Personal access tokens-&gt;Generate new token</code>进入配置github。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209142434389.png" alt="image-20211209142434389"></p><p>选择<code>repo</code>权限后点击的<code>Generate token</code>按钮，成功生成token后，需要将其记录下来避免再次生成。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209144017968.png" alt="image-20211209144017968"></p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209144143937.png" alt="image-20211209144143937"></p><p>然后打开PicGo的界面进行配置<code>图床设置-&gt;GitHub图床</code>：</p><p>①按照<code>账户名/仓库名</code>的格式设置仓库名</p><p>②分支名统一为<code>master</code></p><p>③Token复制上一步的结果</p><p>④保存路径可自定义</p><p>⑤自定义域名格式为：<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF/">https://cdn.jsdelivr.net/gh/用户名/仓库名@分支/</a>（该域名用于通过外链引用图片，该域名能够加快图片的访问速度）</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209163710673.png" alt="image-20211209163710673"></p><p>此时，使用PicGo就能将图片上传到github的仓库中了：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209163743710.png" alt="image-20211209163743710"></p><p>上传后能够直接在github的仓库中看到上传的图片文件：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209164104691.png" alt="image-20211209164104691"></p><p>最后，再检查一下外链是否能够访问，直接复制<code>设定自定义域名</code>中的内容在浏览器打开，能看到以下界面则说明能够正常访问：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209192607836.png" alt="image-20211209192607836"></p><blockquote><p>删除picgo软件中的图片，并不会同时删除github仓库中的图片。</p><p>图片上传失败时也可以直接通过github将图片上传到仓库中。</p></blockquote><h3 id="5-2-图床优化"><a href="#5-2-图床优化" class="headerlink" title="5.2 图床优化"></a>5.2 图床优化</h3><p>为了方便上传，可以在Typora中进行以下偏好设置，就可以实现文章图片的自动上传，可以有效解决一次性上传时因网速带来的失败问题。</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/SB9M9WXI~V$XL%7DU4VMG~L6G.png" alt="img"></p><p>设置好后点击<code>验证图片上传选项</code>按钮，成功上传后能够在github的仓库中看到如下两个测试图片：</p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209164828027.png" alt="image-20211209164828027"></p><p>成功后，再次打开<code>偏好设置-&gt;图像</code>然后将插入图片时的操作改为<code>上传图片</code></p><p><img src="https://cdn.jsdelivr.net/gh/LorrLai/pics@master//blogpics/image-20211209192758005.png" alt="image-20211209192758005"></p><p>此时在文章中插入的图片就能够自动上传到github的仓库中了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>主题推荐：</p><p><a href="https://xpoet.cn/about/">https://xpoet.cn/about/</a></p><p><a href="https://shen-yu.gitee.io/tags/">https://shen-yu.gitee.io/tags/</a></p><p><a href="https://blinkfox.github.io/">https://blinkfox.github.io</a> （本站使用主题）</p><p><a href="https://wa-ri.github.io/about/">https://wa-ri.github.io/about/</a></p><p><a href="https://sharvaridesai.gitlab.io/hexo-theme-standrews/">https://sharvaridesai.gitlab.io/hexo-theme-standrews/</a></p><p><a href="https://frame.zhangyongqi.com/">https://frame.zhangyongqi.com</a></p><p><a href="https://sharvaridesai.gitlab.io/hexo-theme-milan/">https://sharvaridesai.gitlab.io/hexo-theme-milan/</a> </p><p><a href="https://butterfly.js.org/talking/">https://butterfly.js.org/talking/</a></p><p><a href="http://kaijun.rocks/hexo-theme-huxblog/">http://kaijun.rocks/hexo-theme-huxblog/</a></p><p>参考文章：</p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-10">https://sunhwee.com/posts/6e8839eb.html#toc-heading-10</a></p><p><a href="https://jjjjer.github.io/2021/11/29/beginning/">https://jjjjer.github.io/2021/11/29/beginning/</a></p><h2 id="文章更新记录"><a href="#文章更新记录" class="headerlink" title="文章更新记录"></a>文章更新记录</h2><p>2021.12.9 文章完成并发布</p><p>2021.12.17 添加主题修改参考<a href="https://sitoi.cn/posts/63466.html">文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个人博客 </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/04/hello-world/"/>
      <url>/2021/12/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
